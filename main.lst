CCS PCM C Compiler, Version 5.025, 5967               29-Sep-17 00:49

               Filename:   C:\Users\Dung Phan\Documents\Matrix 4x4\main.lst

               ROM used:   870 words (11%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           42 (11%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2F8
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA C2,20
000D:  DATA 4E,10
000E:  DATA 50,24
000F:  DATA C9,26
0010:  DATA A0,26
0011:  DATA 41,10
0012:  DATA 54,29
0013:  DATA 41,27
0014:  DATA 00,00
0015:  DATA CB,22
0016:  DATA 59,28
0017:  DATA 41,22
0018:  DATA 20,1A
0019:  DATA 78,1A
001A:  DATA 00,01
*
01F3:  BSF    0A.0
01F4:  BCF    0A.1
01F5:  BCF    0A.2
01F6:  ADDWF  02,F
01F7:  GOTO   1CB
01F8:  GOTO   1D5
01F9:  GOTO   1DF
01FA:  GOTO   1E9
*
020B:  MOVF   0B,W
020C:  MOVWF  35
020D:  BCF    0B.7
020E:  BSF    03.5
020F:  BSF    03.6
0210:  BSF    0C.7
0211:  BSF    0C.0
0212:  NOP
0213:  NOP
0214:  BCF    03.5
0215:  BCF    03.6
0216:  BTFSC  35.7
0217:  BSF    0B.7
0218:  BSF    03.6
0219:  MOVF   0C,W
021A:  ANDLW  7F
021B:  BTFSC  03.2
021C:  GOTO   25F
021D:  BCF    03.6
021E:  MOVWF  35
021F:  BSF    03.6
0220:  MOVF   0D,W
0221:  BCF    03.6
0222:  MOVWF  36
0223:  BSF    03.6
0224:  MOVF   0F,W
0225:  BCF    03.6
0226:  MOVWF  37
0227:  MOVF   35,W
0228:  MOVWF  38
0229:  CALL   143
022A:  MOVF   36,W
022B:  BSF    03.6
022C:  MOVWF  0D
022D:  BCF    03.6
022E:  MOVF   37,W
022F:  BSF    03.6
0230:  MOVWF  0F
0231:  BCF    03.6
0232:  MOVF   0B,W
0233:  MOVWF  38
0234:  BCF    0B.7
0235:  BSF    03.5
0236:  BSF    03.6
0237:  BSF    0C.7
0238:  BSF    0C.0
0239:  NOP
023A:  NOP
023B:  BCF    03.5
023C:  BCF    03.6
023D:  BTFSC  38.7
023E:  BSF    0B.7
023F:  BSF    03.6
0240:  RLF    0C,W
0241:  RLF    0E,W
0242:  ANDLW  7F
0243:  BTFSC  03.2
0244:  GOTO   25F
0245:  BCF    03.6
0246:  MOVWF  35
0247:  BSF    03.6
0248:  MOVF   0D,W
0249:  BCF    03.6
024A:  MOVWF  36
024B:  BSF    03.6
024C:  MOVF   0F,W
024D:  BCF    03.6
024E:  MOVWF  37
024F:  MOVF   35,W
0250:  MOVWF  38
0251:  CALL   143
0252:  MOVF   36,W
0253:  BSF    03.6
0254:  MOVWF  0D
0255:  BCF    03.6
0256:  MOVF   37,W
0257:  BSF    03.6
0258:  MOVWF  0F
0259:  INCF   0D,F
025A:  BTFSC  03.2
025B:  INCF   0F,F
025C:  BCF    03.6
025D:  GOTO   20B
025E:  BSF    03.6
025F:  BCF    03.6
0260:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
....................  
....................  
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=2000000) 
*
001B:  MOVLW  39
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   028
0021:  MOVLW  A5
0022:  MOVWF  77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  NOP
0026:  DECFSZ 00,F
0027:  GOTO   021
0028:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_D2 
.................... //!#define LCD_ENABLE_PIN     PIN_D3 
.................... //!#define LCD_DATA4          PIN_D4 
.................... //!#define LCD_DATA5          PIN_D5 
.................... //!#define LCD_DATA6          PIN_D6 
.................... //!#define LCD_DATA7          PIN_D7  
....................  
.................... #define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN         PIN_C1 
.................... #define LCD_ENABLE_PIN     PIN_C2 
.................... #define LCD_DATA4          PIN_C3 
.................... #define LCD_DATA5          PIN_C4 
.................... #define LCD_DATA6          PIN_C5 
.................... #define LCD_DATA7          PIN_C6 
....................  
.................... /* 
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
.................... */ 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
0167:  BCF    20.3
0168:  MOVF   20,W
0169:  BSF    03.5
016A:  MOVWF  07
.................... output_drive(LCD_DATA5); 
016B:  BCF    03.5
016C:  BCF    20.4
016D:  MOVF   20,W
016E:  BSF    03.5
016F:  MOVWF  07
.................... output_drive(LCD_DATA6); 
0170:  BCF    03.5
0171:  BCF    20.5
0172:  MOVF   20,W
0173:  BSF    03.5
0174:  MOVWF  07
.................... output_drive(LCD_DATA7); 
0175:  BCF    03.5
0176:  BCF    20.6
0177:  MOVF   20,W
0178:  BSF    03.5
0179:  MOVWF  07
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
017A:  BCF    03.5
017B:  BCF    20.2
017C:  MOVF   20,W
017D:  BSF    03.5
017E:  MOVWF  07
.................... lcd_rs_tris(); 
017F:  BCF    03.5
0180:  BCF    20.0
0181:  MOVF   20,W
0182:  BSF    03.5
0183:  MOVWF  07
.................... lcd_rw_tris(); 
0184:  BCF    03.5
0185:  BCF    20.1
0186:  MOVF   20,W
0187:  BSF    03.5
0188:  MOVWF  07
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
0189:  BCF    03.5
018A:  BCF    07.0
018B:  BCF    20.0
018C:  MOVF   20,W
018D:  BSF    03.5
018E:  MOVWF  07
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
018F:  BCF    03.5
0190:  BCF    07.1
0191:  BCF    20.1
0192:  MOVF   20,W
0193:  BSF    03.5
0194:  MOVWF  07
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
0195:  BCF    03.5
0196:  BCF    07.2
0197:  BCF    20.2
0198:  MOVF   20,W
0199:  BSF    03.5
019A:  MOVWF  07
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
019B:  MOVLW  0F
019C:  BCF    03.5
019D:  MOVWF  39
019E:  CALL   01B
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
019F:  MOVLW  01
01A0:  MOVWF  35
01A1:  MOVF   35,W
01A2:  SUBLW  03
01A3:  BTFSS  03.0
01A4:  GOTO   1AD
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
01A5:  MOVLW  03
01A6:  MOVWF  40
01A7:  CALL   029
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
01A8:  MOVLW  05
01A9:  MOVWF  39
01AA:  CALL   01B
01AB:  INCF   35,F
01AC:  GOTO   1A1
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
01AD:  MOVLW  02
01AE:  MOVWF  40
01AF:  CALL   029
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
01B0:  CLRF   35
01B1:  MOVF   35,W
01B2:  SUBLW  03
01B3:  BTFSS  03.0
01B4:  GOTO   1BE
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
01B5:  MOVF   35,W
01B6:  CALL   004
01B7:  MOVWF  36
01B8:  CLRF   3D
01B9:  MOVF   36,W
01BA:  MOVWF  3E
01BB:  CALL   099
01BC:  INCF   35,F
01BD:  GOTO   1B1
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
009E:  BCF    03.5
009F:  BSF    20.3
00A0:  MOVF   20,W
00A1:  BSF    03.5
00A2:  MOVWF  07
.................... output_float(LCD_DATA5); 
00A3:  BCF    03.5
00A4:  BSF    20.4
00A5:  MOVF   20,W
00A6:  BSF    03.5
00A7:  MOVWF  07
.................... output_float(LCD_DATA6); 
00A8:  BCF    03.5
00A9:  BSF    20.5
00AA:  MOVF   20,W
00AB:  BSF    03.5
00AC:  MOVWF  07
.................... output_float(LCD_DATA7); 
00AD:  BCF    03.5
00AE:  BSF    20.6
00AF:  MOVF   20,W
00B0:  BSF    03.5
00B1:  MOVWF  07
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
00B2:  BCF    03.5
00B3:  BSF    07.1
00B4:  BCF    20.1
00B5:  MOVF   20,W
00B6:  BSF    03.5
00B7:  MOVWF  07
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00B8:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00B9:  BCF    03.5
00BA:  BSF    07.2
00BB:  BCF    20.2
00BC:  MOVF   20,W
00BD:  BSF    03.5
00BE:  MOVWF  07
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00BF:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
00C0:  BCF    03.5
00C1:  CALL   060
00C2:  MOVF   78,W
00C3:  MOVWF  40
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00C4:  BCF    07.2
00C5:  BCF    20.2
00C6:  MOVF   20,W
00C7:  BSF    03.5
00C8:  MOVWF  07
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00C9:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00CA:  BCF    03.5
00CB:  BSF    07.2
00CC:  BCF    20.2
00CD:  MOVF   20,W
00CE:  BSF    03.5
00CF:  MOVWF  07
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00D0:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
00D1:  BCF    03.5
00D2:  CALL   060
00D3:  MOVF   78,W
00D4:  MOVWF  3F
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00D5:  BCF    07.2
00D6:  BCF    20.2
00D7:  MOVF   20,W
00D8:  BSF    03.5
00D9:  MOVWF  07
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
00DA:  BCF    03.5
00DB:  BCF    20.3
00DC:  MOVF   20,W
00DD:  BSF    03.5
00DE:  MOVWF  07
.................... output_drive(LCD_DATA5); 
00DF:  BCF    03.5
00E0:  BCF    20.4
00E1:  MOVF   20,W
00E2:  BSF    03.5
00E3:  MOVWF  07
.................... output_drive(LCD_DATA6); 
00E4:  BCF    03.5
00E5:  BCF    20.5
00E6:  MOVF   20,W
00E7:  BSF    03.5
00E8:  MOVWF  07
.................... output_drive(LCD_DATA7); 
00E9:  BCF    03.5
00EA:  BCF    20.6
00EB:  MOVF   20,W
00EC:  BSF    03.5
00ED:  MOVWF  07
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
00EE:  BCF    03.5
00EF:  SWAPF  40,W
00F0:  MOVWF  77
00F1:  MOVLW  F0
00F2:  ANDWF  77,F
00F3:  MOVF   77,W
00F4:  IORWF  3F,W
00F5:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
*
0060:  CLRF   41
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
0061:  BSF    20.3
0062:  MOVF   20,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  MOVLW  00
0066:  BCF    03.5
0067:  BTFSC  07.3
0068:  MOVLW  01
0069:  IORWF  41,F
.................... n |= input(LCD_DATA5) << 1; 
006A:  BSF    20.4
006B:  MOVF   20,W
006C:  BSF    03.5
006D:  MOVWF  07
006E:  MOVLW  00
006F:  BCF    03.5
0070:  BTFSC  07.4
0071:  MOVLW  01
0072:  MOVWF  77
0073:  BCF    03.0
0074:  RLF    77,F
0075:  MOVF   77,W
0076:  IORWF  41,F
.................... n |= input(LCD_DATA6) << 2; 
0077:  BSF    20.5
0078:  MOVF   20,W
0079:  BSF    03.5
007A:  MOVWF  07
007B:  MOVLW  00
007C:  BCF    03.5
007D:  BTFSC  07.5
007E:  MOVLW  01
007F:  MOVWF  77
0080:  RLF    77,F
0081:  RLF    77,F
0082:  MOVLW  FC
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  41,F
.................... n |= input(LCD_DATA7) << 3; 
0086:  BSF    20.6
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
008A:  MOVLW  00
008B:  BCF    03.5
008C:  BTFSC  07.6
008D:  MOVLW  01
008E:  MOVWF  77
008F:  RLF    77,F
0090:  RLF    77,F
0091:  RLF    77,F
0092:  MOVLW  F8
0093:  ANDWF  77,F
0094:  MOVF   77,W
0095:  IORWF  41,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
0096:  MOVF   41,W
0097:  MOVWF  78
0098:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
0099:  BCF    07.0
009A:  BCF    20.0
009B:  MOVF   20,W
009C:  BSF    03.5
009D:  MOVWF  07
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
00F6:  MOVF   78,W
00F7:  MOVWF  3F
00F8:  BTFSC  3F.7
00F9:  GOTO   09F
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
00FA:  MOVF   3D,F
00FB:  BTFSS  03.2
00FC:  GOTO   0FF
00FD:  BCF    07.0
00FE:  GOTO   100
00FF:  BSF    07.0
0100:  BCF    20.0
0101:  MOVF   20,W
0102:  BSF    03.5
0103:  MOVWF  07
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0104:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
0105:  BCF    03.5
0106:  BCF    07.1
0107:  BCF    20.1
0108:  MOVF   20,W
0109:  BSF    03.5
010A:  MOVWF  07
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
010B:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
010C:  BCF    03.5
010D:  BCF    07.2
010E:  BCF    20.2
010F:  MOVF   20,W
0110:  BSF    03.5
0111:  MOVWF  07
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
0112:  BCF    03.5
0113:  SWAPF  3E,W
0114:  MOVWF  3F
0115:  MOVLW  0F
0116:  ANDWF  3F,F
0117:  MOVF   3F,W
0118:  MOVWF  40
0119:  CALL   029
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
011A:  MOVF   3E,W
011B:  ANDLW  0F
011C:  MOVWF  3F
011D:  MOVWF  40
011E:  CALL   029
011F:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0029:  BTFSC  40.0
002A:  GOTO   02D
002B:  BCF    07.3
002C:  GOTO   02E
002D:  BSF    07.3
002E:  BCF    20.3
002F:  MOVF   20,W
0030:  BSF    03.5
0031:  MOVWF  07
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
0032:  BCF    03.5
0033:  BTFSC  40.1
0034:  GOTO   037
0035:  BCF    07.4
0036:  GOTO   038
0037:  BSF    07.4
0038:  BCF    20.4
0039:  MOVF   20,W
003A:  BSF    03.5
003B:  MOVWF  07
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
003C:  BCF    03.5
003D:  BTFSC  40.2
003E:  GOTO   041
003F:  BCF    07.5
0040:  GOTO   042
0041:  BSF    07.5
0042:  BCF    20.5
0043:  MOVF   20,W
0044:  BSF    03.5
0045:  MOVWF  07
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
0046:  BCF    03.5
0047:  BTFSC  40.3
0048:  GOTO   04B
0049:  BCF    07.6
004A:  GOTO   04C
004B:  BSF    07.6
004C:  BCF    20.6
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0050:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
0051:  BCF    03.5
0052:  BSF    07.2
0053:  BCF    20.2
0054:  MOVF   20,W
0055:  BSF    03.5
0056:  MOVWF  07
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
0057:  NOP
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
0058:  BCF    03.5
0059:  BCF    07.2
005A:  BCF    20.2
005B:  MOVF   20,W
005C:  BSF    03.5
005D:  MOVWF  07
005E:  BCF    03.5
005F:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
0120:  DECFSZ 3A,W
0121:  GOTO   124
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
0122:  CLRF   3B
0123:  GOTO   138
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
0124:  MOVF   3A,W
0125:  SUBLW  02
0126:  BTFSS  03.2
0127:  GOTO   12B
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
0128:  MOVLW  40
0129:  MOVWF  3B
012A:  GOTO   138
.................... else if(y==3) 
012B:  MOVF   3A,W
012C:  SUBLW  03
012D:  BTFSS  03.2
012E:  GOTO   132
....................    address=lcd_line_three;      
012F:  MOVLW  14
0130:  MOVWF  3B
0131:  GOTO   138
.................... else if(y==4) 
0132:  MOVF   3A,W
0133:  SUBLW  04
0134:  BTFSS  03.2
0135:  GOTO   138
....................    address=lcd_line_four;    
0136:  MOVLW  54
0137:  MOVWF  3B
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
0138:  MOVLW  01
0139:  SUBWF  39,W
013A:  ADDWF  3B,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
013B:  MOVF   3B,W
013C:  IORLW  80
013D:  MOVWF  3C
013E:  CLRF   3D
013F:  MOVF   3C,W
0140:  MOVWF  3E
0141:  CALL   099
0142:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
0143:  MOVF   38,W
0144:  XORLW  0C
0145:  BTFSC  03.2
0146:  GOTO   14E
0147:  XORLW  06
0148:  BTFSC  03.2
0149:  GOTO   156
014A:  XORLW  02
014B:  BTFSC  03.2
014C:  GOTO   15C
014D:  GOTO   161
....................    { 
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
014E:  CLRF   3D
014F:  MOVLW  01
0150:  MOVWF  3E
0151:  CALL   099
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
0152:  MOVLW  02
0153:  MOVWF  39
0154:  CALL   01B
....................       break; 
0155:  GOTO   166
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
0156:  MOVLW  01
0157:  MOVWF  39
0158:  MOVLW  02
0159:  MOVWF  3A
015A:  CALL   120
....................       break; 
015B:  GOTO   166
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
015C:  CLRF   3D
015D:  MOVLW  10
015E:  MOVWF  3E
015F:  CALL   099
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
0160:  GOTO   166
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
0161:  MOVLW  01
0162:  MOVWF  3D
0163:  MOVF   38,W
0164:  MOVWF  3E
0165:  CALL   099
....................       break; 
....................    } 
0166:  RETURN
.................... }       
.................... // ***************************************************    
....................  
....................  
.................... #define COT_1 PIN_D0 
.................... #define COT_2 PIN_D1 
.................... #define COT_3 PIN_D2 
.................... #define COT_4 PIN_D3 
....................  
.................... #define HANG_1 input(PIN_D4) 
.................... #define HANG_2 input(PIN_D5) 
.................... #define HANG_3 input(PIN_D6) 
.................... #define HANG_4 input(PIN_D7) 
....................  
....................  
.................... char phimnhan[16]= 
....................                { 
....................                   'c','1','4','7',  
....................                   '0','2','5','8', 
....................                   '=','3','6','9', 
....................                   '+','-','x','/' 
....................                }; 
*
0305:  MOVLW  63
0306:  BCF    03.5
0307:  MOVWF  21
0308:  MOVLW  31
0309:  MOVWF  22
030A:  MOVLW  34
030B:  MOVWF  23
030C:  MOVLW  37
030D:  MOVWF  24
030E:  MOVLW  30
030F:  MOVWF  25
0310:  MOVLW  32
0311:  MOVWF  26
0312:  MOVLW  35
0313:  MOVWF  27
0314:  MOVLW  38
0315:  MOVWF  28
0316:  MOVLW  3D
0317:  MOVWF  29
0318:  MOVLW  33
0319:  MOVWF  2A
031A:  MOVLW  36
031B:  MOVWF  2B
031C:  MOVLW  39
031D:  MOVWF  2C
031E:  MOVLW  2B
031F:  MOVWF  2D
0320:  MOVLW  2D
0321:  MOVWF  2E
0322:  MOVLW  78
0323:  MOVWF  2F
0324:  MOVLW  2F
0325:  MOVWF  30
.................... //-------------------------------------------- 
.................... void dieuKhienCot(char tencot, int1 trangthai) 
.................... { 
....................    switch(tencot) 
*
01C4:  MOVLW  01
01C5:  SUBWF  36,W
01C6:  ADDLW  FC
01C7:  BTFSC  03.0
01C8:  GOTO   1F2
01C9:  ADDLW  04
01CA:  GOTO   1F3
....................    { 
....................       case 1: 
....................       { 
....................          output_bit(COT_1,trangthai); 
01CB:  MOVF   37,F
01CC:  BTFSS  03.2
01CD:  GOTO   1D0
01CE:  BCF    08.0
01CF:  GOTO   1D1
01D0:  BSF    08.0
01D1:  BSF    03.5
01D2:  BCF    08.0
....................          break; 
01D3:  BCF    03.5
01D4:  GOTO   1F2
....................       } 
....................       case 2: 
....................       { 
....................          output_bit(COT_2,trangthai); 
01D5:  MOVF   37,F
01D6:  BTFSS  03.2
01D7:  GOTO   1DA
01D8:  BCF    08.1
01D9:  GOTO   1DB
01DA:  BSF    08.1
01DB:  BSF    03.5
01DC:  BCF    08.1
....................          break; 
01DD:  BCF    03.5
01DE:  GOTO   1F2
....................       } 
....................       case 3: 
....................       { 
....................          output_bit(COT_3,trangthai); 
01DF:  MOVF   37,F
01E0:  BTFSS  03.2
01E1:  GOTO   1E4
01E2:  BCF    08.2
01E3:  GOTO   1E5
01E4:  BSF    08.2
01E5:  BSF    03.5
01E6:  BCF    08.2
....................          break; 
01E7:  BCF    03.5
01E8:  GOTO   1F2
....................       } 
....................       case 4: 
....................       { 
....................          output_bit(COT_4,trangthai); 
01E9:  MOVF   37,F
01EA:  BTFSS  03.2
01EB:  GOTO   1EE
01EC:  BCF    08.3
01ED:  GOTO   1EF
01EE:  BSF    08.3
01EF:  BSF    03.5
01F0:  BCF    08.3
....................          break; 
01F1:  BCF    03.5
....................       } 
....................    } 
01F2:  RETURN
.................... } 
....................  
.................... void khoiDongPhim(void) 
.................... { 
....................    int i; 
....................    for(i=1;i<=4;i++) 
*
01FB:  MOVLW  01
01FC:  MOVWF  35
01FD:  MOVF   35,W
01FE:  SUBLW  04
01FF:  BTFSS  03.0
0200:  GOTO   208
....................    { 
....................       dieuKhienCot(i,1); //bat het cac cot. 
0201:  MOVF   35,W
0202:  MOVWF  36
0203:  MOVLW  01
0204:  MOVWF  37
0205:  CALL   1C4
0206:  INCF   35,F
0207:  GOTO   1FD
....................    } 
0208:  BCF    0A.3
0209:  BCF    0A.4
020A:  GOTO   32E (RETURN)
.................... } 
....................  
.................... char quetPhim(void) 
*
0261:  CLRF   35
.................... { 
....................    char Key = 0; 
....................     
....................    //quet cot 1 
....................    dieuKhienCot(1,0); // tat cot 1. 
0262:  MOVLW  01
0263:  MOVWF  36
0264:  CLRF   37
0265:  CALL   1C4
....................    if(HANG_1 == 0) 
0266:  BSF    03.5
0267:  BSF    08.4
0268:  BCF    03.5
0269:  BTFSC  08.4
026A:  GOTO   26D
....................    { 
....................       Key = 1; 
026B:  MOVLW  01
026C:  MOVWF  35
....................    } 
....................    if(HANG_2 == 0) 
026D:  BSF    03.5
026E:  BSF    08.5
026F:  BCF    03.5
0270:  BTFSC  08.5
0271:  GOTO   274
....................    { 
....................       Key = 2; 
0272:  MOVLW  02
0273:  MOVWF  35
....................    } 
....................    if(HANG_3 == 0) 
0274:  BSF    03.5
0275:  BSF    08.6
0276:  BCF    03.5
0277:  BTFSC  08.6
0278:  GOTO   27B
....................    { 
....................       Key = 3; 
0279:  MOVLW  03
027A:  MOVWF  35
....................    } 
....................    if(HANG_4 == 0) 
027B:  BSF    03.5
027C:  BSF    08.7
027D:  BCF    03.5
027E:  BTFSC  08.7
027F:  GOTO   282
....................    { 
....................       Key = 4; 
0280:  MOVLW  04
0281:  MOVWF  35
....................    } 
....................    dieuKhienCot(1,1); 
0282:  MOVLW  01
0283:  MOVWF  36
0284:  MOVWF  37
0285:  CALL   1C4
....................     
....................    //quet cot 2 
....................    dieuKhienCot(2,0); // tat cot 1. 
0286:  MOVLW  02
0287:  MOVWF  36
0288:  CLRF   37
0289:  CALL   1C4
....................    if(HANG_1 == 0) 
028A:  BSF    03.5
028B:  BSF    08.4
028C:  BCF    03.5
028D:  BTFSC  08.4
028E:  GOTO   291
....................    { 
....................       Key = 5; 
028F:  MOVLW  05
0290:  MOVWF  35
....................    } 
....................    if(HANG_2 == 0) 
0291:  BSF    03.5
0292:  BSF    08.5
0293:  BCF    03.5
0294:  BTFSC  08.5
0295:  GOTO   298
....................    { 
....................       Key = 6; 
0296:  MOVLW  06
0297:  MOVWF  35
....................    } 
....................    if(HANG_3 == 0) 
0298:  BSF    03.5
0299:  BSF    08.6
029A:  BCF    03.5
029B:  BTFSC  08.6
029C:  GOTO   29F
....................    { 
....................       Key = 7; 
029D:  MOVLW  07
029E:  MOVWF  35
....................    } 
....................    if(HANG_4 == 0) 
029F:  BSF    03.5
02A0:  BSF    08.7
02A1:  BCF    03.5
02A2:  BTFSC  08.7
02A3:  GOTO   2A6
....................    { 
....................       Key = 8; 
02A4:  MOVLW  08
02A5:  MOVWF  35
....................    } 
....................    dieuKhienCot(2,1); 
02A6:  MOVLW  02
02A7:  MOVWF  36
02A8:  MOVLW  01
02A9:  MOVWF  37
02AA:  CALL   1C4
....................     
....................    //quet cot 3 
....................    dieuKhienCot(3,0); // tat cot 1. 
02AB:  MOVLW  03
02AC:  MOVWF  36
02AD:  CLRF   37
02AE:  CALL   1C4
....................    if(HANG_1 == 0) 
02AF:  BSF    03.5
02B0:  BSF    08.4
02B1:  BCF    03.5
02B2:  BTFSC  08.4
02B3:  GOTO   2B6
....................    { 
....................       Key = 9; 
02B4:  MOVLW  09
02B5:  MOVWF  35
....................    } 
....................    if(HANG_2 == 0) 
02B6:  BSF    03.5
02B7:  BSF    08.5
02B8:  BCF    03.5
02B9:  BTFSC  08.5
02BA:  GOTO   2BD
....................    { 
....................       Key = 10; 
02BB:  MOVLW  0A
02BC:  MOVWF  35
....................    } 
....................    if(HANG_3 == 0) 
02BD:  BSF    03.5
02BE:  BSF    08.6
02BF:  BCF    03.5
02C0:  BTFSC  08.6
02C1:  GOTO   2C4
....................    { 
....................       Key = 11; 
02C2:  MOVLW  0B
02C3:  MOVWF  35
....................    } 
....................    if(HANG_4 == 0) 
02C4:  BSF    03.5
02C5:  BSF    08.7
02C6:  BCF    03.5
02C7:  BTFSC  08.7
02C8:  GOTO   2CB
....................    { 
....................       Key = 12; 
02C9:  MOVLW  0C
02CA:  MOVWF  35
....................    } 
....................    dieuKhienCot(3,1); 
02CB:  MOVLW  03
02CC:  MOVWF  36
02CD:  MOVLW  01
02CE:  MOVWF  37
02CF:  CALL   1C4
....................     
....................    //quet cot 4 
....................    dieuKhienCot(4,0); // tat cot 1. 
02D0:  MOVLW  04
02D1:  MOVWF  36
02D2:  CLRF   37
02D3:  CALL   1C4
....................    if(HANG_1 == 0) 
02D4:  BSF    03.5
02D5:  BSF    08.4
02D6:  BCF    03.5
02D7:  BTFSC  08.4
02D8:  GOTO   2DB
....................    { 
....................       Key = 13; 
02D9:  MOVLW  0D
02DA:  MOVWF  35
....................    } 
....................    if(HANG_2 == 0) 
02DB:  BSF    03.5
02DC:  BSF    08.5
02DD:  BCF    03.5
02DE:  BTFSC  08.5
02DF:  GOTO   2E2
....................    { 
....................       Key = 14; 
02E0:  MOVLW  0E
02E1:  MOVWF  35
....................    } 
....................    if(HANG_3 == 0) 
02E2:  BSF    03.5
02E3:  BSF    08.6
02E4:  BCF    03.5
02E5:  BTFSC  08.6
02E6:  GOTO   2E9
....................    { 
....................       Key = 15; 
02E7:  MOVLW  0F
02E8:  MOVWF  35
....................    } 
....................    if(HANG_4 == 0) 
02E9:  BSF    03.5
02EA:  BSF    08.7
02EB:  BCF    03.5
02EC:  BTFSC  08.7
02ED:  GOTO   2F0
....................    { 
....................       Key = 16; 
02EE:  MOVLW  10
02EF:  MOVWF  35
....................    } 
....................    dieuKhienCot(4,1); 
02F0:  MOVLW  04
02F1:  MOVWF  36
02F2:  MOVLW  01
02F3:  MOVWF  37
02F4:  CALL   1C4
....................     
....................    return Key; // tra ve gia tri phim cho ham quet phim. 
02F5:  MOVF   35,W
02F6:  MOVWF  78
02F7:  RETURN
.................... } 
....................  
.................... void lcd() 
.................... { 
....................    lcd_init(); 
....................    lcd_putc('\f'); 
*
01BE:  MOVLW  0C
01BF:  MOVWF  38
01C0:  CALL   143
01C1:  BCF    0A.3
01C2:  BCF    0A.4
01C3:  GOTO   32D (RETURN)
.................... } 
....................  
.................... void main() 
*
02F8:  MOVF   03,W
02F9:  ANDLW  1F
02FA:  MOVWF  03
02FB:  MOVLW  FF
02FC:  MOVWF  20
02FD:  BSF    03.5
02FE:  BSF    1F.0
02FF:  BSF    1F.1
0300:  BSF    1F.2
0301:  BCF    1F.3
0302:  MOVLW  07
0303:  MOVWF  1C
0304:  BCF    03.7
*
0326:  CLRF   31
0327:  CLRF   32
0328:  MOVLW  01
0329:  MOVWF  33
032A:  MOVLW  03
032B:  MOVWF  34
.................... { 
....................    char Key=0, tam=0, index1=1,index2=3; 
....................    lcd(); 
032C:  GOTO   167
....................    khoiDongPhim(); 
032D:  GOTO   1FB
....................    lcd_gotoxy(1,1);//tai cot 1, hang 2 
032E:  MOVLW  01
032F:  MOVWF  39
0330:  MOVWF  3A
0331:  CALL   120
....................    printf(lcd_putc,"BAN PHIM MA TRAN"); 
0332:  MOVLW  0C
0333:  BSF    03.6
0334:  MOVWF  0D
0335:  MOVLW  00
0336:  MOVWF  0F
0337:  BCF    03.6
0338:  CALL   20B
....................    lcd_gotoxy(1,2); 
0339:  MOVLW  01
033A:  MOVWF  39
033B:  MOVLW  02
033C:  MOVWF  3A
033D:  CALL   120
....................    printf(lcd_putc,"KEYPAD 4x4"); 
033E:  MOVLW  15
033F:  BSF    03.6
0340:  MOVWF  0D
0341:  MOVLW  00
0342:  MOVWF  0F
0343:  BCF    03.6
0344:  CALL   20B
....................    while(1) 
....................    { 
....................       Key = quetPhim(); 
0345:  CALL   261
0346:  MOVF   78,W
0347:  MOVWF  31
....................       if(Key!=0) 
0348:  MOVF   31,F
0349:  BTFSC  03.2
034A:  GOTO   364
....................       { 
....................          tam=Key; 
034B:  MOVF   31,W
034C:  MOVWF  32
....................          lcd_gotoxy(index1,index2); 
034D:  MOVF   33,W
034E:  MOVWF  39
034F:  MOVF   34,W
0350:  MOVWF  3A
0351:  CALL   120
....................          printf(lcd_putc,"%c",phimnhan[tam-1]); // hien thi phim nhan 
0352:  MOVLW  01
0353:  SUBWF  32,W
0354:  ADDLW  21
0355:  MOVWF  04
0356:  BCF    03.7
0357:  MOVF   00,W
0358:  MOVWF  35
0359:  MOVWF  38
035A:  CALL   143
....................          index1 ++; 
035B:  INCF   33,F
....................          while(quetPhim()!=0) 
035C:  CALL   261
035D:  MOVF   78,F
035E:  BTFSC  03.2
035F:  GOTO   364
....................          {delay_ms(5);} 
0360:  MOVLW  05
0361:  MOVWF  39
0362:  CALL   01B
0363:  GOTO   35C
....................       } 
0364:  GOTO   345
....................    } 
.................... } 
0365:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
